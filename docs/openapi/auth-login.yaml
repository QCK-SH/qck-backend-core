# OpenAPI specification for User Login endpoint
# DEV-102: User Login API with comprehensive security

openapi: 3.0.3
info:
  title: QCK Authentication API
  description: User login and authentication endpoints
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
    description: Development server
  - url: https://api.qck.sh/v1
    description: Production server

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user and obtain JWT tokens
      description: |
        Authenticates a user with email and password, returning JWT access and refresh tokens.
        
        **Security Features:**
        - IP-based rate limiting (configurable per environment)
        - Email-based rate limiting (configurable per environment)
        - Account lockout after failed attempts
        - Password verification with Argon2
        - Device fingerprinting for refresh tokens
        
        **Rate Limiting (Development):**
        - 10 requests per minute per IP address
        - 20 requests per hour per email address
        
        **Rate Limiting (Production):**
        - 5 requests per minute per IP address
        - 10 requests per hour per email address
        
        **Account Lockout:**
        - Development: 10 failed attempts = 5 minutes lockout
        - Staging: 7 failed attempts = 15 minutes lockout
        - Production: 5 failed attempts = 30 minutes lockout
        
        **Token Expiry:**
        - Access token: 24 hours (development), 2 hours (staging), 1 hour (production)
        - Refresh token: 7 days (all environments)
        - Remember me: Extends refresh token to 30 days
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid:
                summary: Valid login request
                value:
                  email: "user@example.com"
                  password: "SecureP@ssw0rd123!"
                  remember_me: false
              withRememberMe:
                summary: Login with remember me
                value:
                  email: "user@example.com"
                  password: "SecureP@ssw0rd123!"
                  remember_me: true
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
              example:
                success: true
                data:
                  access_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjEifQ..."
                  refresh_token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjEifQ..."
                  expires_in: 86400
                  token_type: "Bearer"
                  user:
                    id: "550e8400-e29b-41d4-a716-446655440000"
                    email: "user@example.com"
                    full_name: "John Doe"
                    subscription_tier: "free"
                    onboarding_status: "completed"
                message: "Login successful"
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
              example:
                success: false
                error:
                  code: "INVALID_CREDENTIALS"
                  description: "Invalid credentials"
                  retry_after: null
                message: "Invalid credentials"
        '403':
          description: Forbidden - Account inactive or email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
              examples:
                emailNotVerified:
                  summary: Email not verified
                  value:
                    success: false
                    error:
                      code: "EMAIL_NOT_VERIFIED"
                      description: "Email not verified"
                      retry_after: null
                    message: "Email not verified"
                accountInactive:
                  summary: Account inactive
                  value:
                    success: false
                    error:
                      code: "ACCOUNT_INACTIVE"
                      description: "Account is inactive"
                      retry_after: null
                    message: "Account is inactive"
        '423':
          description: Locked - Account locked due to too many failed attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
              example:
                success: false
                error:
                  code: "ACCOUNT_LOCKED"
                  description: "Account is locked due to too many failed attempts"
                  retry_after: 1800
                message: "Account is locked due to too many failed attempts"
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
              example:
                success: false
                error:
                  code: "RATE_LIMITED"
                  description: "Too many login attempts"
                  retry_after: 60
                message: "Too many login attempts"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
              example:
                success: false
                error:
                  code: "INTERNAL_ERROR"
                  description: "Internal server error"
                  retry_after: null
                message: "Internal server error"

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 320
          description: User's email address (case-insensitive)
          example: "user@example.com"
        password:
          type: string
          format: password
          description: User's password
          example: "SecureP@ssw0rd123!"
        remember_me:
          type: boolean
          default: false
          description: Whether to extend the refresh token duration (30 days instead of 7 days)
          example: false

    LoginResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - token_type
        - user
      properties:
        access_token:
          type: string
          description: JWT access token for API authentication
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjEifQ..."
        refresh_token:
          type: string
          description: JWT refresh token for obtaining new access tokens
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6IjEifQ..."
        expires_in:
          type: integer
          description: Access token expiry time in seconds
          example: 86400
        token_type:
          type: string
          description: Token type (always "Bearer")
          example: "Bearer"
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      required:
        - id
        - email
        - full_name
        - subscription_tier
        - onboarding_status
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        full_name:
          type: string
          description: User's full name
          example: "John Doe"
        subscription_tier:
          type: string
          enum: [free, basic, premium, enterprise, pending]
          description: User's subscription tier
          example: "free"
        onboarding_status:
          type: string
          enum: [registered, email_verified, profile_setup, onboarding_complete, completed]
          description: User's onboarding status
          example: "completed"

    LoginSuccessResponse:
      type: object
      required:
        - success
        - data
        - message
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/LoginResponse'
        message:
          type: string
          example: "Login successful"

    AuthErrorResponse:
      type: object
      required:
        - success
        - error
        - message
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - description
          properties:
            code:
              type: string
              enum: 
                - INVALID_CREDENTIALS
                - ACCOUNT_LOCKED
                - EMAIL_NOT_VERIFIED
                - ACCOUNT_INACTIVE
                - RATE_LIMITED
                - DATABASE_ERROR
                - TOKEN_ERROR
                - INTERNAL_ERROR
              description: Error code for programmatic handling
              example: "INVALID_CREDENTIALS"
            description:
              type: string
              description: Human-readable error description
              example: "Invalid credentials"
            retry_after:
              type: integer
              nullable: true
              description: Seconds until the user can retry (for rate limiting and lockout)
              example: 60
        message:
          type: string
          description: Error message (same as error.description for compatibility)
          example: "Invalid credentials"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token (not required for login)