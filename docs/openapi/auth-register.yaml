# OpenAPI specification for User Registration endpoint
# DEV-101: User Registration API

openapi: 3.0.3
info:
  title: QCK Authentication API
  description: User registration and authentication endpoints
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
    description: Development server
  - url: https://api.qck.sh/v1
    description: Production server

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user account
      description: |
        Creates a new user account with email and password authentication.
        
        **Requirements:**
        - Password must be at least 8 characters
        - Password must contain uppercase, lowercase, number, and special character
        - Email must be unique (case-insensitive)
        - Terms and conditions must be accepted
        
        **Rate Limiting:**
        - 5 requests per minute per IP address
        
        **Email Verification:**
        - New accounts require email verification
        - Verification email sent automatically after registration
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid:
                summary: Valid registration request
                value:
                  email: "user@example.com"
                  password: "SecureP@ssw0rd123!"
                  password_confirmation: "SecureP@ssw0rd123!"
                  full_name: "John Doe"
                  company_name: "Acme Corp"
                  accept_terms: true
              weakPassword:
                summary: Weak password example
                value:
                  email: "user@example.com"
                  password: "weak"
                  password_confirmation: "weak"
                  full_name: "John Doe"
                  company_name: null
                  accept_terms: true
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterSuccessResponse'
              example:
                success: true
                data:
                  user_id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  full_name: "John Doe"
                  company_name: "Acme Corp"
                  email_verification_required: true
                  verification_sent: true
                  message: "Registration successful! Please check your email for a 6-digit verification code."
                message: "User registered successfully"
        '400':
          description: Bad Request - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                passwordMismatch:
                  summary: Passwords don't match
                  value:
                    success: false
                    data: null
                    message: "Passwords do not match"
                invalidEmail:
                  summary: Invalid email format
                  value:
                    success: false
                    data: null
                    message: "email: Invalid email format"
                weakPassword:
                  summary: Password doesn't meet requirements
                  value:
                    success: false
                    data: null
                    message: "password: password_complexity"
                termsNotAccepted:
                  summary: Terms not accepted
                  value:
                    success: false
                    data: null
                    message: "You must accept the terms and conditions"
        '409':
          description: Conflict - Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                data: null
                message: "An account with this email address already exists"
        '429':
          description: Too Many Requests - Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                data: null
                message: "Too many registration attempts. Please try again in 60 seconds"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                data: null
                message: "Failed to create user account"

components:
  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - password_confirmation
        - full_name
        - accept_terms
      properties:
        email:
          type: string
          format: email
          maxLength: 320
          description: User's email address (will be stored in lowercase)
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: |
            Password must contain:
            - At least 8 characters
            - At least one uppercase letter
            - At least one lowercase letter
            - At least one number
            - At least one special character
          example: "SecureP@ssw0rd123!"
        password_confirmation:
          type: string
          format: password
          description: Must match the password field exactly
          example: "SecureP@ssw0rd123!"
        full_name:
          type: string
          minLength: 1
          maxLength: 255
          description: User's full name
          example: "John Doe"
        company_name:
          type: string
          maxLength: 255
          nullable: true
          description: User's company name (optional)
          example: "Acme Corp"
        accept_terms:
          type: boolean
          description: User must accept terms and conditions
          example: true

    RegisterResponse:
      type: object
      required:
        - user_id
        - email
        - full_name
        - email_verification_required
        - verification_sent
        - message
      properties:
        user_id:
          type: string
          format: uuid
          description: Unique identifier for the created user
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: The registered email address
          example: "user@example.com"
        full_name:
          type: string
          description: User's full name
          example: "John Doe"
        company_name:
          type: string
          nullable: true
          description: User's company name
          example: "Acme Corp"
        email_verification_required:
          type: boolean
          description: Whether email verification is required
          example: true
        verification_sent:
          type: boolean
          description: Whether verification email was sent
          example: true
        message:
          type: string
          description: User-friendly success message
          example: "Registration successful! Please check your email to verify your account."

    RegisterSuccessResponse:
      type: object
      required:
        - success
        - data
        - message
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/RegisterResponse'
        message:
          type: string
          example: "User registered successfully"

    ErrorResponse:
      type: object
      required:
        - success
        - data
        - message
      properties:
        success:
          type: boolean
          example: false
        data:
          type: object
          nullable: true
          example: null
        message:
          type: string
          description: Error message describing what went wrong
          example: "An account with this email address already exists"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authentication token (not required for registration)