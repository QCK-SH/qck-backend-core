# PRODUCTION ARM64 COMPOSE
# Distroless API with Alpine databases for production

services:
  # ============================================================================
  # QCK API - GOOGLE DISTROLESS 12.7MB
  # ============================================================================
  qck-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qck-api
    platform: linux/arm64
    ports:
      - "29000:8080"
    
    # Environment variables only
    environment:
      - ENVIRONMENT=production
      - RUST_LOG=warn,qck_backend=info
      - RUST_BACKTRACE=0
      - BIND_ADDRESS=0.0.0.0:8080
      
      # Production features
      - RUN_MIGRATIONS=false  # Run separately
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - ENABLE_RATE_LIMITING=true
      - RATE_LIMIT_PER_SECOND=100
      - RATE_LIMIT_BURST=200
    
    # ========================================
    # MAXIMUM SECURITY HARDENING
    # ========================================
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    
    # Read-only root filesystem (distroless style)
    read_only: true
    
    # Minimal tmpfs
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=50m
    
    # Drop ALL capabilities (distroless has none anyway)
    cap_drop:
      - ALL
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 128M
    
    # Minimal health check (no shell available)
    healthcheck:
      test: ["CMD", "/app/qck-backend", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    
    networks:
      - qck-network
    
    restart: unless-stopped

  # ============================================================================
  # PostgreSQL - Lightweight Alpine
  # ============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: qck-postgres
    platform: linux/arm64
    ports:
      - "29001:5432"
    
    environment:
      - POSTGRES_USER=qck_user
      - POSTGRES_PASSWORD=prod-db-password-complex-long-shit
      - POSTGRES_DB=qck
      
      # Production tuning
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C --auth-local=scram-sha-256 --auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    
    # Minimal security
    security_opt:
      - no-new-privileges:true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
    
    networks:
      - qck-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qck_user -d qck"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped

  # ============================================================================
  # Redis - Minimal Alpine
  # ============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: qck-redis
    platform: linux/arm64
    ports:
      - "29002:6379"
    
    # Minimal Redis configuration
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M
    
    volumes:
      - redis-data:/data
    
    networks:
      - qck-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    
    restart: unless-stopped

  # ============================================================================
  # ClickHouse - Lightweight
  # ============================================================================
  clickhouse:
    image: clickhouse/clickhouse-server:23.12
    container_name: qck-clickhouse
    platform: linux/arm64
    ports:
      - "29003:8123"
      - "29004:9000"
    
    environment:
      - CLICKHOUSE_DB=qck_analytics
      - CLICKHOUSE_USER=qck_user
      - CLICKHOUSE_PASSWORD=prod-clickhouse-password-complex-long-shit
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    
    # Security hardening
    security_opt:
      - no-new-privileges:true
    
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
      - KILL
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    
    networks:
      - qck-network
    
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    
    restart: unless-stopped

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  qck-network:
    driver: bridge

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  clickhouse-data:
    driver: local