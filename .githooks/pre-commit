#!/bin/bash
# Git pre-commit hook - Automatically formats code and validates Diesel migrations before commit
# Install: git config core.hooksPath .githooks

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Run cargo fmt first
echo "üé® Pre-commit: Running cargo fmt..."
if cargo fmt --check >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Code is already formatted${NC}"
else
    echo -e "${BLUE}üìê Formatting code...${NC}"
    cargo fmt
    # Add formatted files to the commit
    git add -u
    echo -e "${GREEN}‚úÖ Code formatted and staged${NC}"
fi

echo ""
echo "üîç Pre-commit: Checking Diesel migrations..."

# Check if any Diesel migration files are being committed
# Diesel uses directories with up.sql and down.sql files
migration_files=$(git diff --cached --name-only | grep "migrations/diesel/.*\.sql$" || true)

if [ -z "$migration_files" ]; then
    # No migration files in this commit, skip checks
    exit 0
fi

echo "Found Diesel migration files in commit:"
echo "$migration_files"
echo ""

# Check for modified existing migrations (DANGEROUS!)
for file in $migration_files; do
    # Check if this file existed in the last commit
    if git show HEAD:"$file" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå ERROR: Attempting to modify existing migration:${NC}"
        echo "  $file"
        echo ""
        echo "Modifying existing migrations will break Diesel's tracking!"
        echo "Instead, create a new migration with: diesel migration generate <name>"
        echo ""
        echo "To bypass this check (NOT RECOMMENDED):"
        echo "  git commit --no-verify"
        exit 1
    fi
done

# Validate Diesel migration structure
for file in $migration_files; do
    # Check if file is either up.sql or down.sql
    filename=$(basename "$file")
    if [[ "$filename" != "up.sql" && "$filename" != "down.sql" ]]; then
        echo -e "${RED}‚ùå ERROR: Invalid Diesel migration file name:${NC}"
        echo "  $file"
        echo ""
        echo "Diesel migrations must be named 'up.sql' or 'down.sql'"
        echo "Use: diesel migration generate <name> to create migrations"
        exit 1
    fi
    
    # Check that migration is in proper directory structure
    # Format: migrations/diesel/YYYY-MM-DD-HHMMSS_name/up.sql or down.sql
    if ! echo "$file" | grep -qE '^migrations/diesel/[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}_[a-z_]+/(up|down)\.sql$'; then
        echo -e "${YELLOW}‚ö†Ô∏è  WARNING: Non-standard Diesel migration path:${NC}"
        echo "  $file"
        echo "  Expected: migrations/diesel/YYYY-MM-DD-HHMMSS_name/(up|down).sql"
    fi
done

# Check if migrations compile successfully
echo "Testing compilation with new migrations..."
if ! cargo build --quiet 2>/dev/null; then
    echo -e "${RED}‚ùå ERROR: Compilation failed with new migrations${NC}"
    echo ""
    echo "Run 'cargo build' to see detailed errors"
    echo "Fix compilation errors before committing"
    exit 1
fi

echo -e "${GREEN}‚úÖ All migration checks passed!${NC}"
exit 0