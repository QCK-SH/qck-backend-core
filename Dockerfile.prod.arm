# ULTRA-MINIMAL DISTROLESS ARM64 BUILD
# Google's distroless for maximum security and minimal size

FROM rust:1.82-alpine AS builder

WORKDIR /app

# Install build dependencies for static linking
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    g++ \
    make

# Add ARM64 musl target
RUN rustup target add aarch64-unknown-linux-musl

# Copy production ARM64 environment
COPY .env.prod.arm .env

# Copy project files
COPY Cargo.toml Cargo.lock ./
COPY migrations ./migrations
COPY src ./src

# Build with MAXIMUM static linking and optimization
ENV CARGO_PROFILE_RELEASE_LTO=true \
    CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1 \
    CARGO_PROFILE_RELEASE_OPT_LEVEL=3 \
    CARGO_PROFILE_RELEASE_PANIC=abort \
    CARGO_PROFILE_RELEASE_STRIP=true \
    RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-static"

RUN cargo build --release --target aarch64-unknown-linux-musl

# DISTROLESS RUNTIME - ULTRA MINIMAL
FROM gcr.io/distroless/static:latest-arm64

# Copy ONLY the binary and config (no shell, no packages, NOTHING)
COPY --from=builder /app/target/aarch64-unknown-linux-musl/release/qck-backend /app/qck-backend
COPY --from=builder /app/.env /app/.env

# Distroless already has a non-root user (65532:65532)
USER 65532:65532

WORKDIR /app
EXPOSE 8080

# No shell available - direct binary execution
ENTRYPOINT ["/app/qck-backend"]